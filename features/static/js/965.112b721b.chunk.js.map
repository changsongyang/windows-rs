{"version":3,"file":"static/js/965.112b721b.chunk.js","mappings":"mBA2BA,MAAMA,EAAS,ICDR,MAAaC,WAAAA,GAAA,KACRC,kBAAY,EAEpB,qBAAMC,CAAgBC,GAClBC,KAAKH,aAAe,CAChBI,YAAa,GACbC,cAAe,GACfC,WAAY,CAAC,GAGjB,MAAMC,QAAiBC,MAAM,0DAADC,OACkCP,EAAM,uCAKpE,OAHIK,EAASG,KACTP,KAAKH,mBAAsBO,EAASI,QAEjCJ,EAASG,EACpB,CAEAE,GAAAA,CAAIC,GACA,MAAMC,EAA+B,CACjCC,WAAW,EACXC,QAAS,IAGb,QAA0BC,IAAtBd,KAAKH,aACL,MAAM,IAAIkB,MAAM,0CAGpB,IAAK,MAAMC,KAAahB,KAAKH,aAAaM,WACtC,IAAK,MAAMc,KAAQjB,KAAKH,aAAaM,WAAWa,GAAY,CACxD,GAAIL,EAAQE,QAAQK,QAAU,GAAI,CAC9BP,EAAQC,WAAY,EACpB,KACJ,CAEA,MAAMO,EAAiBnB,KAAKH,aAAaK,cACrCkB,OAAOC,SAASL,IAEfM,QAAQ,WAAY,IACpBA,QAAQ,MAAO,MAEdC,EAAYJ,EAAiB,KAAOF,EAAKO,KAC/C,IAAIC,GAAM,EACV,IACIA,EAAM,IAAIC,OAAOhB,EAAO,KAAKiB,KAAKJ,EACtC,CAAE,MAAAK,GACEH,EAAMF,EAAUM,SAASnB,EAC7B,CAEA,GAAIe,EAAK,CACL,IAAIK,EAAqBb,EAAKa,SAASC,KAClCC,GAAQhC,KAAKH,aAAcI,YAAY+B,KAG5CF,EAAWA,EAASG,QACfC,GAAY,eAANA,GAA4B,qBAANA,IAGjCvB,EAAQE,QAAQsB,KAAK,CACjBX,KAAMP,EAAKO,KACXR,UAAWG,EACXW,SAAUA,GAElB,CACJ,CAGJ,OAAOnB,CACX,GDlEJyB,KAAKC,UAAaC,IAEd,OAD4BA,EAAGC,KACnBf,MACR,IAAK,aAAc,CACf,MAAMgB,EAAkCF,EAAGC,KAC3C5C,EAAOG,gBAAgB0C,EAAYzC,QAAQ0C,MAAKC,IAC5CC,YAAY,CACRnB,KAAM,mBACNkB,OAAQA,GACkB,IAElC,KACJ,CACA,QAAS,CACL,MAAME,EAAgCN,EAAGC,KACnC5B,EAAUhB,EAAOc,IAAImC,EAAclC,OACzCiC,YAAY,CACRnB,KAAM,eACNX,QAASF,EAAQE,QACjBD,UAAWD,EAAQC,WAE3B,EACJ,C","sources":["worker/worker.ts","worker/search.ts"],"sourcesContent":["/// <reference lib=\"webworker\" />\n\nimport { Search, SearchResult } from './search';\n\ndeclare let self: ServiceWorkerGlobalScope;\n\nexport interface IWorkerMessage {\n    name: string;\n}\n\nexport interface IInitializeMessage extends IWorkerMessage {\n    branch: string;\n}\n\nexport interface ISearchMessage extends IWorkerMessage {\n    query: string;\n}\n\nexport interface ISearchResultMessage extends IWorkerMessage {\n    results: SearchResult[];\n    truncated: boolean;\n}\n\nexport interface IInitializeResultMessage extends IWorkerMessage {\n    result: boolean;\n}\n\nconst search = new Search();\n\nself.onmessage = (ev: ExtendableMessageEvent) => {\n    const msg: IWorkerMessage = ev.data;\n    switch (msg.name) {\n        case 'initialize': {\n            const initMessage: IInitializeMessage = ev.data;\n            search.InitializeAsync(initMessage.branch).then(result => {\n                postMessage({\n                    name: 'initializeResult',\n                    result: result,\n                } as IInitializeResultMessage);\n            });\n            break;\n        }\n        default: {\n            const searchMessage: ISearchMessage = ev.data;\n            const summary = search.For(searchMessage.query);\n            postMessage({\n                name: 'searchResult',\n                results: summary.results,\n                truncated: summary.truncated,\n            } as ISearchResultMessage);\n        }\n    }\n};\n","export type SearchIndex = {\n    namespace_map: string[];\n    feature_map: string[];\n    namespaces: {\n        [key: string]: [\n            {\n                name: string;\n                features: number[];\n            }\n        ];\n    };\n};\n\nexport type SearchResultSummary = {\n    truncated: boolean;\n    results: SearchResult[];\n};\n\nexport type SearchResult = {\n    name: string;\n    namespace: string;\n    features: string[];\n};\n\nexport type SearchQuery = string;\n\nexport class Search {\n    private _searchIndex: SearchIndex | undefined;\n\n    async InitializeAsync(branch: string): Promise<boolean> {\n        this._searchIndex = {\n            feature_map: [],\n            namespace_map: [],\n            namespaces: {},\n        };\n\n        const response = await fetch(\n            `https://raw.githubusercontent.com/microsoft/windows-rs/${branch}/crates/libs/windows/features.json`\n        );\n        if (response.ok) {\n            this._searchIndex = await (response.json() as Promise<SearchIndex>);\n        }\n        return response.ok;\n    }\n\n    For(query: SearchQuery): SearchResultSummary {\n        const summary: SearchResultSummary = {\n            truncated: false,\n            results: [],\n        };\n\n        if (this._searchIndex === undefined) {\n            throw new Error('Search index has not been initialized.');\n        }\n\n        for (const namespace in this._searchIndex.namespaces) {\n            for (const item of this._searchIndex.namespaces[namespace]) {\n                if (summary.results.length >= 50) {\n                    summary.truncated = true;\n                    break;\n                }\n\n                const full_namespace = this._searchIndex.namespace_map[\n                    Number.parseInt(namespace)\n                ]\n                    .replace('Windows.', '')\n                    .replace(/\\./g, '::');\n\n                const full_name = full_namespace + '::' + item.name;\n                let hit = false;\n                try {\n                    hit = new RegExp(query, 'i').test(full_name);\n                } catch {\n                    hit = full_name.includes(query);\n                }\n\n                if (hit) {\n                    let features: string[] = item.features.map(\n                        (idx) => this._searchIndex!.feature_map[idx]\n                    );\n\n                    features = features.filter(\n                        (f) => f !== 'Foundation' && f !== 'Win32_Foundation'\n                    );\n\n                    summary.results.push({\n                        name: item.name,\n                        namespace: full_namespace,\n                        features: features,\n                    });\n                }\n            }\n        }\n\n        return summary;\n    }\n}\n"],"names":["search","constructor","_searchIndex","InitializeAsync","branch","this","feature_map","namespace_map","namespaces","response","fetch","concat","ok","json","For","query","summary","truncated","results","undefined","Error","namespace","item","length","full_namespace","Number","parseInt","replace","full_name","name","hit","RegExp","test","_unused","includes","features","map","idx","filter","f","push","self","onmessage","ev","data","initMessage","then","result","postMessage","searchMessage"],"sourceRoot":""}