(()=>{"use strict";const e=new class{constructor(){this._searchIndex=void 0}async InitializeAsync(e){this._searchIndex={feature_map:[],namespace_map:[],namespaces:{}};const s=await fetch("https://raw.githubusercontent.com/microsoft/windows-rs/".concat(e,"/crates/libs/windows/features.json"));return s.ok&&(this._searchIndex=await s.json()),s.ok}For(e){const s={truncated:!1,results:[]};if(void 0===this._searchIndex)throw new Error("Search index has not been initialized.");for(const a in this._searchIndex.namespaces)for(const n of this._searchIndex.namespaces[a]){if(s.results.length>=50){s.truncated=!0;break}const r=this._searchIndex.namespace_map[Number.parseInt(a)].replace("Windows.","").replace(/\./g,"::"),c=r+"::"+n.name;let i=!1;try{i=new RegExp(e,"i").test(c)}catch(t){i=c.includes(e)}if(i){let e=n.features.map((e=>this._searchIndex.feature_map[e]));e=e.filter((e=>"Foundation"!==e&&"Win32_Foundation"!==e)),s.results.push({name:n.name,namespace:r,features:e})}}return s}};self.onmessage=s=>{switch(s.data.name){case"initialize":{const t=s.data;e.InitializeAsync(t.branch).then((e=>{postMessage({name:"initializeResult",result:e})}));break}default:{const t=s.data,a=e.For(t.query);postMessage({name:"searchResult",results:a.results,truncated:a.truncated})}}}})();
//# sourceMappingURL=965.112b721b.chunk.js.map