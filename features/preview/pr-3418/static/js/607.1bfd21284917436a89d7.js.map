{"version":3,"file":"static/js/607.1bfd21284917436a89d7.js","mappings":"mBA2BA,MAAMA,EAAS,ICDR,MAGG,eAAAC,CAAgBC,G,qCAClBC,KAAKC,aAAe,CAChBC,YAAa,GACbC,cAAe,GACfC,WAAY,CAAC,GAGjB,MAAMC,QAAiBC,MACnB,0DAA0DP,uCAK9D,OAHIM,EAASE,KACTP,KAAKC,mBAAsBI,EAASG,QAEjCH,EAASE,EACpB,E,+RAEA,GAAAE,CAAIC,GACA,MAAMC,EAA+B,CACjCC,WAAW,EACXC,QAAS,IAGb,QAA0BC,IAAtBd,KAAKC,aACL,MAAM,IAAIc,MAAM,0CAGpB,MAAMX,EAAaJ,KAAKC,aAAaG,WACrC,IAAK,MAAMY,KAAaZ,EACpB,IAAK,MAAMa,KAAQb,EAAWY,GAAa,CACvC,GAAIL,EAAQE,QAAQK,QAAU,GAAI,CAC9BP,EAAQC,WAAY,EACpB,KACJ,CAEA,MAAMO,EAAiBnB,KAAKC,aAAaE,cACrCiB,OAAOC,SAASL,IAEfM,QAAQ,WAAY,IACpBA,QAAQ,MAAO,MAEdC,EAAYJ,EAAiB,KAAOF,EAAKO,KAC/C,IAAIC,GAAM,EACV,IACIA,EAAM,IAAIC,OAAOhB,EAAO,KAAKiB,KAAKJ,EACtC,CAAE,SACEE,EAAMF,EAAUK,SAASlB,EAC7B,CAEA,GAAIe,EAAK,CACL,IAAII,EAAqBZ,EAAKY,SAASC,KAClCC,GAAQ/B,KAAKC,aAAcC,YAAY6B,KAG5CF,EAAWA,EAASG,QACfC,GAAY,eAANA,GAA4B,qBAANA,IAGjCtB,EAAQE,QAAQqB,KAAK,CACjBV,KAAMP,EAAKO,KACXR,UAAWG,EACXU,SAAUA,GAElB,CACJ,CAuBJ,OAjBAlB,EAAQE,QAAQsB,MAAK,CAACC,EAAGC,KACrB,MAAMC,EAAc5B,EAAM6B,cACpBC,EAAUJ,EAAEZ,KAAKe,cACjBE,EAAUJ,EAAEb,KAAKe,cAEjBG,EAAQF,EAAQG,QAAQL,GACxBM,EAAQH,EAAQE,QAAQL,GAE9B,OAAII,IAAUE,EACHF,EAAQE,EAGER,EAAEZ,KAAKN,QAAUwB,EAAQhC,EAAMQ,SAC/BmB,EAAEb,KAAKN,QAAU0B,EAAQlC,EAAMQ,QAClB,IAG/BP,CACX,GDvFJkC,KAAKC,UAAaC,IAEd,OAD4BA,EAAGC,KACnBxB,MACR,IAAK,aAAc,CACf,MAAMyB,EAAkCF,EAAGC,KAC3CnD,EAAOC,gBAAgBmD,EAAYlD,QAAQmD,MAAKC,IAC5CC,YAAY,CACR5B,KAAM,mBACN2B,OAAQA,GACkB,IAElC,KACJ,CACA,QAAS,CACL,MAAME,EAAgCN,EAAGC,KACnCrC,EAAUd,EAAOY,IAAI4C,EAAc3C,OACzC0C,YAAY,CACR5B,KAAM,eACNX,QAASF,EAAQE,QACjBD,UAAWD,EAAQC,WAE3B,EACJ,C","sources":["webpack://windows-rs.web.features/./src/worker/worker.ts","webpack://windows-rs.web.features/./src/worker/search.ts"],"sourcesContent":["/// <reference lib=\"webworker\" />\n\nimport { Search, SearchResult } from './search';\n\ndeclare let self: ServiceWorkerGlobalScope;\n\nexport interface IWorkerMessage {\n    name: string;\n}\n\nexport interface IInitializeMessage extends IWorkerMessage {\n    branch: string;\n}\n\nexport interface ISearchMessage extends IWorkerMessage {\n    query: string;\n}\n\nexport interface ISearchResultMessage extends IWorkerMessage {\n    results: SearchResult[];\n    truncated: boolean;\n}\n\nexport interface IInitializeResultMessage extends IWorkerMessage {\n    result: boolean;\n}\n\nconst search = new Search();\n\nself.onmessage = (ev: ExtendableMessageEvent) => {\n    const msg: IWorkerMessage = ev.data;\n    switch (msg.name) {\n        case 'initialize': {\n            const initMessage: IInitializeMessage = ev.data;\n            search.InitializeAsync(initMessage.branch).then(result => {\n                postMessage({\n                    name: 'initializeResult',\n                    result: result,\n                } as IInitializeResultMessage);\n            });\n            break;\n        }\n        default: {\n            const searchMessage: ISearchMessage = ev.data;\n            const summary = search.For(searchMessage.query);\n            postMessage({\n                name: 'searchResult',\n                results: summary.results,\n                truncated: summary.truncated,\n            } as ISearchResultMessage);\n        }\n    }\n};\n","export type SearchIndex = {\n    namespace_map: string[];\n    feature_map: string[];\n    namespaces: {\n        [key: string]: [\n            {\n                name: string;\n                features: number[];\n            }\n        ];\n    };\n};\n\nexport type SearchResultSummary = {\n    truncated: boolean;\n    results: SearchResult[];\n};\n\nexport type SearchResult = {\n    name: string;\n    namespace: string;\n    features: string[];\n};\n\nexport type SearchQuery = string;\n\nexport class Search {\n    private _searchIndex: SearchIndex | undefined;\n\n    async InitializeAsync(branch: string): Promise<boolean> {\n        this._searchIndex = {\n            feature_map: [],\n            namespace_map: [],\n            namespaces: {},\n        };\n\n        const response = await fetch(\n            `https://raw.githubusercontent.com/microsoft/windows-rs/${branch}/crates/libs/windows/features.json`\n        );\n        if (response.ok) {\n            this._searchIndex = await (response.json() as Promise<SearchIndex>);\n        }\n        return response.ok;\n    }\n\n    For(query: SearchQuery): SearchResultSummary {\n        const summary: SearchResultSummary = {\n            truncated: false,\n            results: [],\n        };\n\n        if (this._searchIndex === undefined) {\n            throw new Error('Search index has not been initialized.');\n        }\n\n        const namespaces = this._searchIndex.namespaces;\n        for (const namespace in namespaces) {\n            for (const item of namespaces[namespace]!) {\n                if (summary.results.length >= 50) {\n                    summary.truncated = true;\n                    break;\n                }\n\n                const full_namespace = this._searchIndex.namespace_map[\n                    Number.parseInt(namespace)\n                ]!\n                    .replace('Windows.', '')\n                    .replace(/\\./g, '::');\n\n                const full_name = full_namespace + '::' + item.name;\n                let hit = false;\n                try {\n                    hit = new RegExp(query, 'i').test(full_name);\n                } catch {\n                    hit = full_name.includes(query);\n                }\n\n                if (hit) {\n                    let features: string[] = item.features.map(\n                        (idx) => this._searchIndex!.feature_map[idx]!\n                    );\n\n                    features = features.filter(\n                        (f) => f !== 'Foundation' && f !== 'Win32_Foundation'\n                    );\n\n                    summary.results.push({\n                        name: item.name,\n                        namespace: full_namespace,\n                        features: features,\n                    });\n                }\n            }\n        }\n\n        // Sorts results by match position and suffix length.\n        // \"createprocess\" in \"CreateProcess\" beats \"SHCREATEPROCESSINFOW\".\n        // \"createprocess\" in \"CreateProcessW\" beats \"CreateProcessWithTokenW\".\n        summary.results.sort((a, b) => {\n            const query_lower = query.toLowerCase();\n            const a_lower = a.name.toLowerCase();\n            const b_lower = b.name.toLowerCase();\n            \n            const pos_a = a_lower.indexOf(query_lower);\n            const pos_b = b_lower.indexOf(query_lower);\n            \n            if (pos_a !== pos_b) {\n                return pos_a - pos_b;\n            }\n            \n            const suffix_len_a = a.name.length - (pos_a + query.length);\n            const suffix_len_b = b.name.length - (pos_b + query.length);\n            return suffix_len_a - suffix_len_b;\n        });\n\n        return summary;\n    }\n}\n"],"names":["search","InitializeAsync","branch","this","_searchIndex","feature_map","namespace_map","namespaces","response","fetch","ok","json","For","query","summary","truncated","results","undefined","Error","namespace","item","length","full_namespace","Number","parseInt","replace","full_name","name","hit","RegExp","test","includes","features","map","idx","filter","f","push","sort","a","b","query_lower","toLowerCase","a_lower","b_lower","pos_a","indexOf","pos_b","self","onmessage","ev","data","initMessage","then","result","postMessage","searchMessage"],"sourceRoot":""}